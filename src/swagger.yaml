openapi: 3.0.0
info:
  title: Home Tuition Backend API
  description: |
    This is the backend API for the **Home Tuition Platform**, designed to manage tutors, students, and class schedules efficiently. 
    
    The API provides endpoints for user authentication, tutor registration, student enrollment, and class management. 
    
    We encourage contributions to improve and extend the API. Feel free to explore, suggest changes, or enhance the features.
    
    Some useful links:
    - [Backend Repository](https://github.com/razrahul/Client-Backend)
    - [Frontend UI](https://contact-fromdata.netlify.app)
    
  termsOfService: http://swagger.io/terms/
  contact:
    name: Rahul Kumar
    email: razrahuleee@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: https://client-backend-ev0b.onrender.com/api/v1
    description: Production Server
  - url: http://localhost:5500/api/v1
    description: Local Development Server
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: Teacher
  - name: Student
  - name: Subject
  - name: area
  - name: Faq
  - name: Contact-from
  - name: Feedback
paths:
  /admin/teacher:
    get:
      tags:
        - Teacher
      summary: find techer subjrcyt and areaid
      security:
        - noauthAuth: []
      parameters:
        - name: areaId
          in: query
          schema:
            type: string
          example: 67ab5744788714c671eda8e3
        - name: subjectId
          in: query
          schema:
            type: string
          example: 67aabf39a5089d3abffc0e21
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /createTeacher:
    post:
      tags:
        - Teacher
      summary: create teacher
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: raz rahul
                email:
                  type: string
                  example: razrahul@gmail.com
                phone:
                  type: integer
                  example: '9708712422'
                areaId:
                  type: string
                  example: 679bc80a8644cad662b9046a
                aboutUs:
                  type: string
                  example: testing chai rha h
                subjectId:
                  type: string
                  example: 67aabf07a5089d3abffc0e1e , 67aabf39a5089d3abffc0e21
                chargeRate:
                  type: string
                  example: 100-200
                file:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/findteacher:
    post:
      tags:
        - Teacher
      summary: find teacher name , subject and areaname
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                SubjectandAreaName: math
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /teacher/live:
    get:
      tags:
        - Teacher
      summary: Get All live Teacher
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateTeacher/{teacherId}:
    put:
      tags:
        - Teacher
      summary: update teacher
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: roushan kumar
                email:
                  type: string
                  example: roushan@gmail.com
                phone:
                  type: integer
                  example: '9708500422'
                areaId:
                  type: string
                  example: 67ab5744788714c671eda8e3
                aboutUs:
                  type: string
                  example: update testing chai rha h
                subjectId:
                  type: string
                  example: 67aabf5ea5089d3abffc0e24, 67aabf39a5089d3abffc0e21
                chargeRate:
                  type: string
                  example: 100-200
                file:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      parameters:
        - name: teacherId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getTeachers:
    get:
      tags:
        - Teacher
      summary: Get All teachers
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /teacher/updatelive/{teacherId}:
    patch:
      tags:
        - Teacher
      summary: update live teacher
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: teacherId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getTeacherById/{teacherId}:
    get:
      tags:
        - Teacher
      summary: GEt Teacher By Id
      security:
        - noauthAuth: []
      parameters:
        - name: teacherId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /deleteTeacher/{teacherId}:
    delete:
      tags:
        - Teacher
      summary: delete Teacher
      security:
        - noauthAuth: []
      parameters:
        - name: teacherId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /student:
    get:
      tags:
        - Student
      summary: get all students
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Student
      summary: create Student
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: raz rahul
                email:
                  type: string
                  example: razrahul@gmail.com
                phone:
                  type: integer
                  example: '9708712422'
                areaId:
                  type: string
                  example: 679bc80a8644cad662b9046a
                aboutUs:
                  type: string
                  example: testing chai rha h
                subjectId:
                  type: string
                  example: 67aabf07a5089d3abffc0e1e , 67aabf39a5089d3abffc0e21
                chargeRate:
                  type: string
                  example: 100-200
                className:
                  type: string
                  example: 11th
                gender:
                  type: string
                  example: Male
                file:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /student/{Id}:
    get:
      tags:
        - Student
      summary: get Student by id
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
          example: 67a8f294d524a28357e2884e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Student
      summary: update student
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: raz rahul
                email:
                  type: string
                  example: rajan@gmail.com
                phone:
                  type: integer
                  example: '9708712422'
                areaId:
                  type: string
                  example: 67ab5744788714c671eda8e3
                aboutUs:
                  type: string
                  example: update testing chai rha h
                subjectId:
                  type: string
                  example: 67aabf07a5089d3abffc0e1e , 67aabf39a5089d3abffc0e21
                chargeRate:
                  type: string
                  example: 300-200
                className:
                  type: string
                  example: 12th
                gender:
                  type: string
                  example: Female
                file:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
          example: 67abaf1d10ba9f78da741fab
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Student
      summary: Delete Student
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /student/live:
    get:
      tags:
        - Student
      summary: Get All Live Students
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /student/updatelive/{Id}:
    patch:
      tags:
        - Student
      summary: update live status student
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/student:
    get:
      tags:
        - Student
      summary: find student by area and subject
      security:
        - noauthAuth: []
      parameters:
        - name: subjectId
          in: query
          schema:
            type: string
          example: 67aabf07a5089d3abffc0e1e
        - name: areaId
          in: query
          schema:
            type: string
          example: 67ab5744788714c671eda8e3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subject:
    get:
      tags:
        - Subject
      summary: get All Subject
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Subject
      summary: create subject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: computer
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subject/live:
    get:
      tags:
        - Subject
      summary: get all live subject
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subject/updatelive/{Id}:
    patch:
      tags:
        - Subject
      summary: update  islive subject
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
          example: 67aabf07a5089d3abffc0e1e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subject/{Id}:
    get:
      tags:
        - Subject
      summary: Get Subject By Id
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
          example: 67ac6559eda9e2d5400a34ec
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Subject
      summary: update Subject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Biogoly
      security:
        - noauthAuth: []
      parameters:
        - name: Id
          in: path
          schema:
            type: string
          required: true
          example: 67aabf39a5089d3abffc0e21
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subject/{id}:
    delete:
      tags:
        - Subject
      summary: Delete Subject
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67aabf39a5089d3abffc0e21
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateLiveStatus/area/67ab7fc23648ce7accb29b9a:
    patch:
      tags:
        - area
      summary: update islive area
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /areas/live:
    get:
      tags:
        - area
      summary: All Live Area
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getAreas:
    get:
      tags:
        - area
      summary: get All Area
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getAreaById/{areaId}:
    get:
      tags:
        - area
      summary: Get Area By Id
      security:
        - noauthAuth: []
      parameters:
        - name: areaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /createArea:
    post:
      tags:
        - area
      summary: Create Area
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Benipur
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateArea/{areaId}:
    put:
      tags:
        - area
      summary: update Area
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Darbhanga
      security:
        - noauthAuth: []
      parameters:
        - name: areaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /deleteArea/67ab7fc23648ce7accb29b9a:
    delete:
      tags:
        - area
      summary: delete Area
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateLiveStatus/area/{id}:
    get:
      tags:
        - area
      summary: update live Area
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /faq:
    post:
      tags:
        - Faq
      summary: create faq
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                question: What  is Your 2nd Name ?
                answer: My Name 2nd is razrahul
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Faq
      summary: Get All Faq
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /faq/live:
    get:
      tags:
        - Faq
      summary: get All live Faq
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /faq/{id}:
    get:
      tags:
        - Faq
      summary: Get Faq By Id
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67accb6d7c9c9390c667ea37
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Faq
      summary: update Faq
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                question: Name ?
                answer: razrahul
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67accb6d7c9c9390c667ea37
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Faq
      summary: delete Faq
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67accb6d7c9c9390c667ea37
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  //faq/updatelive/{id}:
    patch:
      tags:
        - Faq
      summary: update live status
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67accb6d7c9c9390c667ea37
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /submitContactForm:
    post:
      tags:
        - Contact-from
      summary: Create Form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Sajan Kumar
                number: '9708712422'
                whatsappNumber: '9708712422'
                email: sajan@gmail.com
                role: Teacher
                className: 12th
                subjectList: 'math, English, Social Science '
                timeslot: 10AM-12AM
                feeRange: 200-300
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getAllContactForms:
    get:
      tags:
        - Contact-from
      summary: Get All From Data (Sorting new in 1st)
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateContactForm/{formId}:
    put:
      tags:
        - Contact-from
      summary: update Contact Form
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Sajan Kumar
                number: '9708712422'
                whatsappNumber: '9708712422'
                email: sajan@gmail.com
                role: Teacher
                className: 12th
                subjectList: 'History, English, Social Science '
                timeslot: 10AM-12AM
                feeRange: 200-300
      security:
        - noauthAuth: []
      parameters:
        - name: formId
          in: path
          schema:
            type: string
          required: true
          example: 67acecf10cbd597a34e0103e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /getContactFormById/{formId}:
    get:
      tags:
        - Contact-from
      summary: Get From data By Id
      security:
        - noauthAuth: []
      parameters:
        - name: formId
          in: path
          schema:
            type: string
          required: true
          example: 67acecf10cbd597a34e0103e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateLivefrom/{formId}:
    patch:
      tags:
        - Contact-from
      summary: update From Live Status
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: formId
          in: path
          schema:
            type: string
          required: true
          example: 67acecf10cbd597a34e0103e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /updateIncomplete/{formId}:
    patch:
      tags:
        - Contact-from
      summary: update in complete Status
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: formId
          in: path
          schema:
            type: string
          required: true
          example: 67acecf10cbd597a34e0103e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /deleteContactForm/{formId}:
    delete:
      tags:
        - Contact-from
      summary: delete From data
      security:
        - noauthAuth: []
      parameters:
        - name: formId
          in: path
          schema:
            type: string
          required: true
          example: 67acecf10cbd597a34e0103e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /feedback:
    post:
      tags:
        - Feedback
      summary: create Feedback
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 67abaf1d10ba9f78da741fab
                feedback: i Am Good Testing Chal rha h
                rating: '3'
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Feedback
      summary: get All Feedback
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /feedback/{id}:
    get:
      tags:
        - Feedback
      summary: get feedback by id
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67ab619470b80dbb551f9195
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
